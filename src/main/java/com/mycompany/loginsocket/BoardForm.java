/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.loginsocket;

import com.google.gson.Gson;
import com.google.gson.internal.LinkedTreeMap;
import com.google.gson.reflect.TypeToken;

import com.mycompany.loginsocket.controllers.DiceController;
import com.mycompany.loginsocket.models.Response;
import com.mycompany.loginsocket.tablero.Board;
import com.mycompany.loginsocket.tablero.Gamer;

import com.mycompany.loginsocket.tablero.Pawn;
import java.awt.Graphics;
import java.awt.Insets;

import java.io.IOException;
import java.util.ArrayList;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.swing.Icon;
import javax.swing.ImageIcon;


/**
 *
 * @author Usuario
 */
public class BoardForm extends javax.swing.JFrame implements ResponseListener {

    /**
     * Creates new form BoardForm
     */
    ClientSocket clientSocket;
    String stringBoard;
    Game game;
    DiceController diceController;
    Gson gson = new Gson();
    boolean move=false;

    public BoardForm() {
        initComponents();
        clientSocket = Init.clientSocket;
        diceController = new DiceController(dice, clientSocket);

        Response response = new Response(Response.GAME);
        try {
            clientSocket.send(gson.toJson(response));
        } catch (IOException ex) {
            System.out.println("Int√©ntelo otra vez");
        }

        clientSocket.addListenner(this);

        //System.out.println(Arrays.toString(arr));
    }

    @Override
    public void paint(Graphics g){
        if(game!=null){
            game.getBoard().repaint(g);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dice = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        dice.setIcon(new javax.swing.ImageIcon("D:\\UNIVERSIDAD\\2020-3\\Distribuidos\\tareas\\LoginSocket\\src\\main\\java\\com\\mycompany\\loginsocket\\images\\dice_1.png")); // NOI18N
        dice.setMargin(new java.awt.Insets(0, 0, 0, 0));
        dice.setMaximumSize(new java.awt.Dimension(45, 40));
        dice.setMinimumSize(new java.awt.Dimension(30, 30));
        dice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                diceMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addComponent(dice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(459, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(603, Short.MAX_VALUE)
                .addComponent(dice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void diceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_diceMouseClicked
        if (dice.isEnabled() && !move)
            diceController.launch();
    }//GEN-LAST:event_diceMouseClicked

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if(!move) return;
        Insets insets = this.getInsets();
        List<Pawn> list=game.board.pawns.get(LoginForm.clientHash);
        int x=evt.getPoint().x+insets.left;
        int y=evt.getPoint().y;
        for(Pawn p:list){
            int x1=50 + 30 * (p.y+1);
            int y1=150 + 30 * (p.x+1);
            if(x>=x1 && y>=y1 && x<=x1+30 && y<=y1+30){
                System.out.println(p.x+1);
                System.out.println(p.y+1);
                p.setX(p.x+1);
                p.setY(p.y+1);
            }
        }
    }//GEN-LAST:event_formMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BoardForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BoardForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BoardForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BoardForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BoardForm().setVisible(true);
            }
        });
    }

    @Override
    public void onResponse(ResponseEvent event) {
           // JSONParser parser = new JSONParser();
            //JSONObject jsonResult = (JSONObject) parser.parse(event.getResponse());
            //String action = (String) jsonResult.get("action");
              
            Response response = gson.fromJson(event.getResponse(), Response.class);
            if (response.isAction(Response.GAME)) {
                java.lang.reflect.Type type = new TypeToken<Game>() {}.getType();  
                game=gson.fromJson((String)response.get("game"), type);
                String template = (String) response.get("template");
                  if (game.turnId == LoginForm.clientHash) {
                    dice.setEnabled(true);
                } else {
                    dice.setEnabled(false);
                }
                  //game.setBoard(new Board(game.getBoard().getTemplate(),this.getGraphics()));
                  game.board.setTemplate(template, this.getGraphics());
                  int i=1;
                  for(Integer key : game.gamers.keySet()){
                      game.getBoard().drawGamer(i,key ,this.getGraphics());
                      i++;
                  }
            }
            if (response.isAction(Response.NEW_GAMER)) {
                java.lang.reflect.Type type = new TypeToken<Gamer>() {}.getType(); 
                Gamer gamer=gson.fromJson((String)response.get("gamer"), type);
                type = new TypeToken<List<Pawn>>() {}.getType(); 
                List<Pawn> pawns=gson.fromJson((String)response.get("pawns"), type);
                if (gamer.getClientHash()!= LoginForm.clientHash) {
                    game.addGamer(gamer, pawns);
                    game.getBoard().drawGamer(game.gamers.size(),gamer.getClientHash(), this.getGraphics());                    
                }
            }
            if (response.isAction(Response.LAUNCH_DICE)) {
                int number = ((Double) response.get("number")).intValue();
                Icon icon = new ImageIcon(Utils.path + "dice_" + number + ".png");
                dice.setIcon(icon);
            }
            if (response.isAction(Response.FINISH_DICE)) {
                int number = ((Double) response.get("number")).intValue();
                int turn = ((Double) response.get("turn")).intValue();
                System.out.println(turn);
                game.setTurn(turn);
                if (turn == LoginForm.clientHash) {
                    dice.setEnabled(true);
                } else {
                    dice.setEnabled(false);
                }
                if(number==6){
                    move=true;
                }
                Icon icon = new ImageIcon(Utils.path + "dice_" + number + ".png");
                dice.setIcon(icon);
            }
      

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton dice;
    // End of variables declaration//GEN-END:variables
}
