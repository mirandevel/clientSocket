/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.loginsocket;

import com.google.gson.Gson;
import com.mycompany.loginsocket.controllers.DiceController;
import com.mycompany.loginsocket.tablero.Board;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author Usuario
 */
public class BoardForm extends javax.swing.JFrame implements ResponseListener {

    /**
     * Creates new form BoardForm
     */
    ClientSocket clientSocket;
    String stringBoard;
    Game game;
    DiceController diceController;

    public BoardForm() {
        initComponents();
        clientSocket = Init.clientSocket;
        diceController = new DiceController(dice, clientSocket);

        JSONObject obj = new JSONObject();
        obj.put("action", "game");
        try {
            clientSocket.send(obj.toJSONString());
        } catch (IOException ex) {
            System.out.println("Int√©ntelo otra vez");
        }

        clientSocket.addListenner(this);

        //System.out.println(Arrays.toString(arr));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dice = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        dice.setIcon(new javax.swing.JLabel() {
            public javax.swing.Icon getIcon() {
                try {
                    return new javax.swing.ImageIcon(
                        new java.net.URL("file:/D:/UNIVERSIDAD/2020-3/Distribuidos/tareas/LoginSocket/src/main/java/com/mycompany/loginsocket/images/dice_1.png")
                    );
                } catch (java.net.MalformedURLException e) {
                }
                return null;
            }
        }.getIcon());
        dice.setMargin(new java.awt.Insets(0, 0, 0, 0));
        dice.setMaximumSize(new java.awt.Dimension(45, 40));
        dice.setMinimumSize(new java.awt.Dimension(30, 30));
        dice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                diceMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addComponent(dice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(459, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(615, Short.MAX_VALUE)
                .addComponent(dice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void diceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_diceMouseClicked
        if(dice.isEnabled())
        diceController.launch();
    }//GEN-LAST:event_diceMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BoardForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BoardForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BoardForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BoardForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BoardForm().setVisible(true);
            }
        });
    }

    @Override
    public void onResponse(ResponseEvent event) {
        try {
            JSONParser parser = new JSONParser();
            JSONObject jsonResult = (JSONObject) parser.parse(event.getResponse());
            String action = (String) jsonResult.get("action");
            if (action.compareTo("game") == 0) {
                boolean success = (boolean) jsonResult.get("success");
                if (success) {
                    String template = (String) jsonResult.get("template");
                    List<Long> ids = (List<Long>) jsonResult.get("gamers");
                    Long turn = (Long) jsonResult.get("turn");
                    
                    
                    game = new Game(template, this.getGraphics());
                    game.setTurn(turn);
                    if (turn == LoginForm.clientHash) dice.setEnabled(true);
                     else dice.setEnabled(false);
                    int i = 1;
                    for (long id : ids) {
                        game.addGamer((int) id);
                        game.getBoard().drawGamer(i, this.getGraphics());
                        i++;
                    }
                }
            }
            if (action.compareTo("new_gamer") == 0) {
                long id = (long) jsonResult.get("id");
                if (id != LoginForm.clientHash) {
                    game.addGamer((int) id);
                    game.getBoard().drawGamer(game.gamers.size(), this.getGraphics());
                }
            }
            if (action.compareTo("launch_dice") == 0) {
                Long number = (Long) jsonResult.get("number");
                Icon icon = new ImageIcon(Utils.path + "dice_" + number + ".png");
                dice.setIcon(icon);
            }
            if (action.compareTo("finish_dice") == 0) {
                Long number = (Long) jsonResult.get("number");
                Long turn = (Long) jsonResult.get("turn");
                System.out.println(turn);
                game.setTurn(turn);
                if (turn == LoginForm.clientHash) dice.setEnabled(true);
                     else dice.setEnabled(false);
                Icon icon = new ImageIcon(Utils.path + "dice_" + number + ".png");
                dice.setIcon(icon);
            }
        } catch (ParseException ex) {
            System.out.println("Intentelo otra vez");
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton dice;
    // End of variables declaration//GEN-END:variables
}
